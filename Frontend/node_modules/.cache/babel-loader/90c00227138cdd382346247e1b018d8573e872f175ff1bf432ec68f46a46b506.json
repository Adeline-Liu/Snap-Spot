{"ast":null,"code":"var _jsxFileName = \"/Users/adelineliu/Desktop/Projects/snap-spot/src/shared/components/UIElements/Modal.js\";\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./Modal.css\";\nimport Backdrop from \"./Backdrop\";\nimport { CSSTransition } from \"react-transition-group\";\n\n// internal use only, so don't need to export, will used by modal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalOverlay = props => {\n  const content =\n  /*#__PURE__*/\n  // the ${} syntax is used inside backticks (``) to insert a JavaScript expression into a string\n  // in this case, props.className, props.style, props.headerClass, props.contentClass, props.children, props.footer\n  // we do that to complete the class name, and maybe something else\n  _jsxDEV(\"div\", {\n    className: `modal ${props.className}`,\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: `modal__header ${props.headerClass}`,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.header\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: props.onSubmit ? props.onSubmit : event => event.preventDefault()\n      // if props.onSubmit is not defined, event.preventDefault()\n      // is used to prevent the form from being submitted and the page from reloading\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `modal__content ${props.contentClass}`,\n        children: props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: `modal__footer ${props.footerClass}`,\n        children: props.footer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/ReactDom.createPortal(content, document.getElementById(\"modal-hook\"));\n  // every component that is rendered using a portal needs to have a mounting point in the HTML file\n  // when you use ReactDom.createPortal(content, container)\n  // the container is a reference to a DOM element where the content will be rendered\n  // his container element must exist in the DOM before you use the portal\n  // typically you would create this container element in your index.html file\n  // so it's available when your React components need to use portals to render content\n};\n_c = ModalOverlay;\nconst Modal = props => {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [props.show && /*#__PURE__*/_jsxDEV(Backdrop, {\n      onClick: props.onCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: props.show // when props.show is true (when showMap is true), the animation will be rendered\n      ,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      timeout: 280,\n      classNames: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(ModalOverlay, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Modal;\nexport default Modal;\nvar _c, _c2;\n$RefreshReg$(_c, \"ModalOverlay\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["React","ReactDom","Backdrop","CSSTransition","jsxDEV","_jsxDEV","ModalOverlay","props","content","className","style","children","headerClass","header","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","event","preventDefault","contentClass","footerClass","footer","createPortal","document","getElementById","_c","Modal","Fragment","show","onClick","onCancel","in","mountOnEnter","unmountOnExit","timeout","classNames","_c2","$RefreshReg$"],"sources":["/Users/adelineliu/Desktop/Projects/snap-spot/src/shared/components/UIElements/Modal.js"],"sourcesContent":["import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport \"./Modal.css\";\nimport Backdrop from \"./Backdrop\";\nimport { CSSTransition } from \"react-transition-group\";\n\n// internal use only, so don't need to export, will used by modal\nconst ModalOverlay = (props) => {\n  const content = (\n    // the ${} syntax is used inside backticks (``) to insert a JavaScript expression into a string\n    // in this case, props.className, props.style, props.headerClass, props.contentClass, props.children, props.footer\n    // we do that to complete the class name, and maybe something else\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n          // if props.onSubmit is not defined, event.preventDefault()\n          // is used to prevent the form from being submitted and the page from reloading\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDom.createPortal(content, document.getElementById(\"modal-hook\"));\n  // every component that is rendered using a portal needs to have a mounting point in the HTML file\n  // when you use ReactDom.createPortal(content, container)\n  // the container is a reference to a DOM element where the content will be rendered\n  // his container element must exist in the DOM before you use the portal\n  // typically you would create this container element in your index.html file\n  // so it's available when your React components need to use portals to render content\n};\n\nconst Modal = (props) => {\n  return (\n    <React.Fragment>\n      {props.show && <Backdrop onClick={props.onCancel} />}\n      {/* conditionally renders the Backdrop component if the show prop is true\n      the Backdrop component is only rendered when the modal is visible */}\n      <CSSTransition\n        in={props.show} // when props.show is true (when showMap is true), the animation will be rendered\n        mountOnEnter\n        unmountOnExit\n        timeout={280}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n        {/* pass the props of Modal to ModalOverlay */}\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAEhC,OAAO,aAAa;AACpB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,aAAa,QAAQ,wBAAwB;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,MAAMC,OAAO;EAAA;EACX;EACA;EACA;EACAH,OAAA;IAAKI,SAAS,EAAG,SAAQF,KAAK,CAACE,SAAU,EAAE;IAACC,KAAK,EAAEH,KAAK,CAACG,KAAM;IAAAC,QAAA,gBAC7DN,OAAA;MAAQI,SAAS,EAAG,iBAAgBF,KAAK,CAACK,WAAY,EAAE;MAAAD,QAAA,eACtDN,OAAA;QAAAM,QAAA,EAAKJ,KAAK,CAACM;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,eACTZ,OAAA;MACEa,QAAQ,EACNX,KAAK,CAACW,QAAQ,GAAGX,KAAK,CAACW,QAAQ,GAAIC,KAAK,IAAKA,KAAK,CAACC,cAAc,CAAC;MAClE;MACA;MACD;MAAAT,QAAA,gBAEDN,OAAA;QAAKI,SAAS,EAAG,kBAAiBF,KAAK,CAACc,YAAa,EAAE;QAAAV,QAAA,EACpDJ,KAAK,CAACI;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eACNZ,OAAA;QAAQI,SAAS,EAAG,iBAAgBF,KAAK,CAACe,WAAY,EAAE;QAAAX,QAAA,EACrDJ,KAAK,CAACgB;MAAM;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CACN;EACD,oBAAOhB,QAAQ,CAACuB,YAAY,CAAChB,OAAO,EAAEiB,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAAC;EAC5E;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACC,EAAA,GAhCIrB,YAAY;AAkClB,MAAMsB,KAAK,GAAIrB,KAAK,IAAK;EACvB,oBACEF,OAAA,CAACL,KAAK,CAAC6B,QAAQ;IAAAlB,QAAA,GACZJ,KAAK,CAACuB,IAAI,iBAAIzB,OAAA,CAACH,QAAQ;MAAC6B,OAAO,EAAExB,KAAK,CAACyB;IAAS;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGpDZ,OAAA,CAACF,aAAa;MACZ8B,EAAE,EAAE1B,KAAK,CAACuB,IAAK,CAAC;MAAA;MAChBI,YAAY;MACZC,aAAa;MACbC,OAAO,EAAE,GAAI;MACbC,UAAU,EAAC,OAAO;MAAA1B,QAAA,eAElBN,OAAA,CAACC,YAAY;QAAA,GAAKC;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAErB,CAAC;AAACqB,GAAA,GAlBIV,KAAK;AAoBX,eAAeA,KAAK;AAAC,IAAAD,EAAA,EAAAW,GAAA;AAAAC,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}